---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      version: "39.x"
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 60m
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  # TODO
  values:
    alertmanager:
      fullnameOverride: alertmanager
      enabled: true
      ingress:
        enabled: false
    grafana:
      enabled: true
      defaultDashboardsTimezone: ${TIMEZONE}
      fullnameOverride: grafana
      forceDeployDatasources: false
      forceDeployDashboards: false
      defaultDashboardsEnabled: true
      serviceMonitor:
        enabled: true
      admin:
        existingSecret: "grafana-password"
        userKey: admin-user
        passwordKey: admin-password
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-staging"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Grafana"
          hajimari.io/icon: "chart-bar"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-cloudflare-only@kubernetescrd"
        hosts:
          - "grafana.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "grafana.${SECRET_DOMAIN}"
            secretName: "grafana-tls"

    kubeApiServer:
      enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeControllerManager:
      enabled: true
      # endpoints: # ips of servers
      #   - 192.168.178.20
      #   - 192.168.178.21
      #   - 192.168.178.22

    coreDns:
      enabled: true

    kubeDns:
      enabled: false

    kubeEtcd:
      enabled: true
      # endpoints: # ips of servers
      #   - 192.168.178.20
      #   - 192.168.178.21
      #   - 192.168.178.22
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    kubeScheduler:
      enabled: true
      # endpoints: # ips of servers
      #   - 192.168.178.20
      #   - 192.168.178.21
      #   - 192.168.178.22

    kubeProxy:
      enabled: true
      # endpoints: # ips of servers
      #   - 192.168.178.20
      #   - 192.168.178.21
      #   - 192.168.178.22

    kubeStateMetrics:
      enabled: true

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      selfMonitor:
        enabled: true
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      podLabels:
        jobLabel: node-exporter
      extraArgs:
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      service:
        portName: http-metrics
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    prometheusOperator:
      enabled: true
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 200m
            memory: 50Mi
          limits:
            memory: 100Mi

    ## Deploy a Prometheus instance
    ##
    prometheus:
      prometheusSpec:
        retention: 24h
        enableAdminAPI: false
        walCompression: true  # Enable compression of the write-ahead log using Snappy.
        ruleSelectorNilUsesHelmValues: false            # Ask TechnoTim
        serviceMonitorSelectorNilUsesHelmValues: false  #
        podMonitorSelectorNilUsesHelmValues: false      #
        probeSelectorNilUsesHelmValues: false           #
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 2048Mi
        nodeSelector:
          node-role.kubernetes.io/control-plane: "true"
        podMonitorNamespaceSelector: {}
        podMonitorSelector:
          matchLabels:
            app.kubernetes.io/component: monitoring
        storageSpec: {}
        ## Using PersistentVolumeClaim
        ##
        #  volumeClaimTemplate:
        #    spec:
        #      storageClassName: gluster
        #      accessModes: ["ReadWriteOnce"]
        #      resources:
        #        requests:
        #          storage: 50Gi
        #    selector: {}
    ##

    ## Configuration for thanosRuler
    ## ref: https://thanos.io/tip/components/rule.md/
    ##
    thanosRuler:
      enabled: false
